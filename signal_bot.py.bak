import subprocess
import time
import logging
import os
from logging.handlers import RotatingFileHandler
import re
from datetime import datetime

# === Erweiterter Logger mit Rotation & Farbe ===
def setup_logger():
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, "signal_bot.log")

    formatter_file = logging.Formatter(
        fmt="%(asctime)s [%(levelname)s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    try:
        import colorlog
        formatter_console = colorlog.ColoredFormatter(
            "%(log_color)s%(asctime)s [%(levelname)s]%(reset)s %(message)s",
            datefmt="%H:%M:%S",
            log_colors={
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "bold_red",
            }
        )
        console_handler = colorlog.StreamHandler()
        console_handler.setFormatter(formatter_console)
    except ImportError:
        formatter_console = formatter_file
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter_console)

    file_handler = RotatingFileHandler(log_file, maxBytes=2_000_000, backupCount=5)
    file_handler.setFormatter(formatter_file)

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)

setup_logger()
logger = logging.getLogger(__name__)

# === Signal-Konfiguration ===
BOT_NUMBER = "+4915755901211"
GROUP_NAME = "Borgo-Bot"
KEYWORD = "!Bot"
SIGNAL_CLI = "/usr/local/bin/signal-cli" # anpassen falls n√∂tig

logger.info("ü§ñ Signal-Bot l√§uft und lauscht auf Gruppennachrichten ...")

def receive_messages():
    """
    Lauscht dauerhaft auf eingehende Signal-Gruppennachrichten und verarbeitet nur solche mit dem Schl√ºsselwort !Bot.
    """
    command = [
        "signal-cli",
        "-u", SIGNAL_PHONE_NUMBER,
        "receive"
    ]

    try:
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        logging.info("üì° Warte auf eingehende Nachrichten √ºber signal-cli receive ...")

        for line in process.stdout:
            line = line.strip()
            if not line:
                continue

            logging.debug(f"üì• Empfangene Zeile: {line}")

            # Verarbeitung starten, wenn Keyword und Gruppenname stimmen
            if GROUP_NAME in line and BOT_KEYWORD in line:
                logging.info(f"üß† Relevante Nachricht erkannt: {line}")
                response = generate_bot_response(line)
                if response:
                    send_response_to_group(response)

    except Exception as e:
        logging.exception(f"‚ùå Fehler beim Empfangen von Nachrichten: {e}")

def process_message(text):
    # Hier echte Modellverarbeitung integrieren ‚Äì aktuell Dummyantwort
    return f"üß† Du hast gefragt: {text.replace(KEYWORD, '').strip()}"

def send_group_message(response, group_id):
    logger.info(f"üì§ Antwort an Gruppe ({GROUP_NAME}): {response}")
    subprocess.run([
        SIGNAL_CLI, "-u", BOT_NUMBER, "send", "-g", group_id, "-m", response
    ])

if __name__ == "__main__":
    try:
        receive_messages()
    except KeyboardInterrupt:
        logger.warning("‚õîÔ∏è Bot wurde manuell beendet.")